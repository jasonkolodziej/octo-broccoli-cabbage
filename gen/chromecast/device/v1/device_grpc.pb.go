// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: chromecast/device/v1/device.proto

package devicev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DeviceController_Play_FullMethodName = "/chromecast.device.v1.DeviceController/Play"
)

// DeviceControllerClient is the client API for DeviceController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeviceControllerClient interface {
	Play(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type deviceControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewDeviceControllerClient(cc grpc.ClientConnInterface) DeviceControllerClient {
	return &deviceControllerClient{cc}
}

func (c *deviceControllerClient) Play(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DeviceController_Play_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeviceControllerServer is the server API for DeviceController service.
// All implementations should embed UnimplementedDeviceControllerServer
// for forward compatibility
type DeviceControllerServer interface {
	Play(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
}

// UnimplementedDeviceControllerServer should be embedded to have forward compatible implementations.
type UnimplementedDeviceControllerServer struct {
}

func (UnimplementedDeviceControllerServer) Play(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Play not implemented")
}

// UnsafeDeviceControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeviceControllerServer will
// result in compilation errors.
type UnsafeDeviceControllerServer interface {
	mustEmbedUnimplementedDeviceControllerServer()
}

func RegisterDeviceControllerServer(s grpc.ServiceRegistrar, srv DeviceControllerServer) {
	s.RegisterService(&DeviceController_ServiceDesc, srv)
}

func _DeviceController_Play_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceControllerServer).Play(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceController_Play_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceControllerServer).Play(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// DeviceController_ServiceDesc is the grpc.ServiceDesc for DeviceController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DeviceController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chromecast.device.v1.DeviceController",
	HandlerType: (*DeviceControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Play",
			Handler:    _DeviceController_Play_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chromecast/device/v1/device.proto",
}
